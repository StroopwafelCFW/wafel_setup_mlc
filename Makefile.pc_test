# Makefile for PC-based testing of xml_utils
# Intended to be run from the project root directory.

# Compiler and flags
CC = gcc
# -Isource to find xml_utils.h in source/
CFLAGS = -Wall -Wextra -g -Isource
LDFLAGS =

# Directories
SOURCE_DIR = source
TEST_DIR = tests
BUILD_DIR = build/pc_test

# Source files
XML_UTILS_SRC = $(SOURCE_DIR)/xml_utils.c
TEST_C_SRC = $(TEST_DIR)/test_xml_utils.c

# Object files (paths will be, e.g., build/pc_test/xml_utils.o)
XML_UTILS_OBJ = $(BUILD_DIR)/$(notdir $(XML_UTILS_SRC:.c=.o))
TEST_OBJ = $(BUILD_DIR)/$(notdir $(TEST_C_SRC:.c=.o))

# Target executable (will be created in BUILD_DIR)
TEST_EXEC = $(BUILD_DIR)/test_xml_utils_pc

.PHONY: all run clean

all: $(TEST_EXEC)

# Rule to create the build directory
$(BUILD_DIR_MARKER):
	@echo "Creating build directory $(BUILD_DIR)..."
	@mkdir -p $(BUILD_DIR)

# Linking rule: uses object files from BUILD_DIR to create executable in BUILD_DIR
$(TEST_EXEC): $(XML_UTILS_OBJ) $(TEST_OBJ)
	@echo "Linking $(TEST_EXEC)..."
	$(CC) $(CFLAGS) -o $(TEST_EXEC) $(XML_UTILS_OBJ) $(TEST_OBJ) $(LDFLAGS)
	@echo "$(notdir $(TEST_EXEC)) built successfully in $(BUILD_DIR)."

# Compilation rule for .c files in source/ to .o files in BUILD_DIR/
# This rule handles xml_utils.c -> build/pc_test/xml_utils.o
$(BUILD_DIR)/xml_utils.o: $(SOURCE_DIR)/xml_utils.c
	@echo "Compiling $< to $@..."
	$(CC) $(CFLAGS) -c $< -o $@

# Compilation rule for .c files in tests/ to .o files in BUILD_DIR/
# This rule handles test_xml_utils.c -> build/pc_test/test_xml_utils.o
$(BUILD_DIR)/test_xml_utils.o: $(TEST_DIR)/test_xml_utils.c
	@echo "Compiling $< to $@..."
	$(CC) $(CFLAGS) -c $< -o $@

run: all
	@echo "Running tests from project root (executable in $(BUILD_DIR))..."
	@$(TEST_EXEC) # Execute directly as path is included

clean:
	@echo "Cleaning up build artifacts..."
	@rm -rf $(BUILD_DIR) # Remove the entire build directory
	@echo "Done."
